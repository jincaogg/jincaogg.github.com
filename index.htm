<!DOCTYPE HTML>
<html dir="ltr" lang="zh-CN">
<head>
<title>首页</title>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="description" content="">
<meta name="viewport" content="width=device-width">

<link href="/res/themes/bootstrap-responsive.min.css" rel="stylesheet">
<link href="/res/themes/united.min.css" rel="stylesheet">
<link href="/res/strapdown.css" rel="stylesheet">

<script src='https://raw.github.com/chjj/marked/master/lib/marked.js' ></script>

<style>
footer{
    border-top: 1px solid #802C59; margin-bottom: -30px; padding-top: 10px;
}
</style>
</head>


<div class="navbar navbar-inverse navbar-fixed-top">
 <div class="navbar-inner">
  <div class="container">
    <a data-toggle="collapse" data-target=".nav-collapse" class="btn btn-navbar">
        <i class="icon icon-reorder"></i>菜单</a>
    <a href="/index.htm" class="brand">RedMast</a>
   <div class="nav-collapse collapse">
    <ul class="nav">
     <li class=""><a href="/index.htm">首页</a></li>
     <li><a href="/list.htm">列表</a></li>
     
         <li><a href="/page/about.htm">关于</a></li>
     
    </ul>
   </div>
  </div>
 </div>
</div>



<xmp theme='united' style='display:none;'>
</xmp>
<div class='main'>
    <div class='container'>
        <div class='row'>
             <div class='span9'>
                
                <article>
                 <small>2013-03-31 11:30</small>
                <h1><a href="post/Other/github_markdown.htm">用github+markdown搭建极简博客</a></h1>
                <div><pre class='md_body'>
                
###背景

以前的Blog采用了WordPress放到虚拟主机上，很久时间没管，记起了上去才发现服务器都关了，数据全都没有备份。

后续接触了MarkDown，非常喜欢这种简洁易表达的文本输写格式，遂采用 `scriptogr.am` 的服务搭建了一个blog，然后一下就喜欢上了这种直接用文本编辑器写Blog，放到本地目录的方式。

但发现 sciptogr.am 的功能定制化不够。其后一直在找一种比较简单并更加可控的静态Blog的搭建方式，其间找到jekyll等静态生成器，但安装和使用都太复杂，常常依赖一大堆的库。

于是就自己用Python简单写了从MarkDown生成静态Blog的脚本，总共不到270行代码。其中还包含实现了一个简单到简陋的模板，

你现在所看到这个就是通过这个脚本生成的了。

###特点
 
 1. 采用基于showdown.js用来解析Markdown，
 
 2. 采用了Disqus作为评论系统，
 
 3. 采用了bootstrap做为页</pre>
                </div>
                </article>
                
                <article>
                 <small>2012-12-17 11:25</small>
                <h1><a href="post/Other/nginx根据cookie负载均衡.htm">nginx根据cookie负载均衡</a></h1>
                <div><pre class='md_body'>
                
nginx可以根据url path进行分流，也可以根据cookie分流
 
两台服务器分别定义为

	apache001：192.168.1.1:8080
	apache002：192.168.1.2:8080
 
默认服务器为：

	default：192.168.1.0:8080
 
前端nginx服务器监听端口8080，需要根据cookie转发，查询的cookie的键（key）为uid，如果该cookie值（value）以1结尾则转发到apache001，以2结尾则转发到apache002。
 
- 方案1：

   用map，nginx.conf配置如下：
 
		map $COOKIE_uid $group { ~*1$ apache001;  ~*2$ apache002;  default root; }   
		upstream apache001 { server 192.168.1.1:8080 weight=1 max_fails=1 fail_timeout=30s; }   
		upstream apache002 { server 192.168.1.2:8080 weight=1 max_fails=1 fail_timeout=30s; }   
		upstream root {  server 192.168.1.0:8080 weight=1 max_fails=1 fail_timeout=30s; }   
		server {listen 8080;
				server_name  neoremind.net;    
				log_format main '$remote_addr - $remote_user [$time_local] "$request" ' '$status $body_bytes_sent "$http_refere</pre>
                </div>
                </article>
                
                <article>
                 <small>2012-11-28 11:25</small>
                <h1><a href="post/PHP/pb4php.htm">Protobuf在PHP里应用备忘</a></h1>
                <div><pre class='md_body'>
                

##引用包Protocolbuf
  
  1. 下载包[pb4php](http://code.google.com/p/pb4php/)
  
  2. 根据proto文件生成PHP的代码文件 `test.proto` > `pb_proto_test.php` 
                     
         <?php
         require_once('../parser/pb_parser.php');
         $test = new PBParser();
         $test->parse('./test.proto');
         //---
         
 
  3. 引用刚生成的代码文件，解析，存储PB格式数据
         
         <?php         
         require_once('../message/pb_message.php');
         // now read it with the old file
         // include the generated file
         require_once('./pb_proto_test.php');    
         $string = file_get_contents('./test.pb');
         // Just read it
         $book = new AddressBook();
         $book->parseFromString($string);
         var_dump($book->person_size());
         $person = $book->person(0);
         var_dump($person->name());
         $person = $book->person(1);
         var_dump($person->name());        
         </pre>
                </div>
                </article>
                
             </div>
            <div class='span3'>
<aside class='aside'>
         <div class='well'>
                <section>  
                    <form class='form-search' method="get" action="https://www.google.com.hk/search" taget='_blank'>
                        <input type="hidden" name="domain" value="site:jincaogg.github.com" />
                        <input type='text' name='q' size=5 class='input-small search-query' />
                        <button type='submit' class='btn'>Search</button>
                    </form>
                </section>
         </div>

          <div class='well'>
                <section>
                    <h3>About</h3>
                    <div>
                    </div>
        
                </section>
         </div>
         <div  class='well'>
                <section>
                    <h3>New </h3>
                    <ol class='posts'>
                        
                            <li><a href="post/Other/github_markdown.htm">用github+markdown搭建极简博客</a></li>
                        
                            <li><a href="post/Other/nginx根据cookie负载均衡.htm">nginx根据cookie负载均衡</a></li>
                        
                            <li><a href="post/PHP/pb4php.htm">Protobuf在PHP里应用备忘</a></li>
                        
                    </ol>
                </section>
        </div>
</aside>
</div>

        </div>
    </div>
     
    
</div>
<script src="/res/js/jquery-1.8.0.min.js"></script>
<script type='text/javascript'>
marked.setOptions({
	  gfm: true,
	  pedantic: false,
	  sanitize: true,
	  // callback for code highlighter
	  highlight: function(code, lang) {
	    if (lang === 'js') {
	      return javascriptHighlighter(code);
	    }
	    return code;
	  }
	});
$.each($('article .md_body'), function(k, v) {
    var obj=$(v);
    var md_body_str=$(v).text();
    
    var html=marked.parser(marked.lexer(md_body_str));

    obj.html(html);
    
});

</script>

<script src="/res/strapdown.js"></script>
<footer>
      <div class="container">
        <div class="row">
          <div class="span12">
            <center>
              <p>Copyright © 2013</p>
            </center>
          </div>
        </div>
      </div>
</footer>
</html>

